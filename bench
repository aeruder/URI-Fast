#!perl

use common::sense;
use URI;
use URI::Fast qw(uri);
use Benchmark qw(:all);

my $POD;

if (@ARGV[0]) {
  open $POD, '>', './lib/URI/Fast/Benchmarks.pod' or die $!;
} else {
  my $str = '';
  open $POD, '>', \$str;
}

print $POD q{# PODNAME: URI::Fast::Benchmarks
# ABSTRACT: Benchmarks comparing URI::Fast and URI

=head1 BENCHMARKS

Various operations comparing L<URI::Fast> against L<URI>'s performance. The
script to recreate is included in the C<bench> folder of the distribution.

Tests were performed on my development machine, a 2015 MacBook Pro (2.7 GHz
Intel Core i5, 8GB 1867 MHz DDR3 RAM) using Perl 5.24 installed using
L<perlbrew|https://perlbrew.pl>.

};

my @urls = (
  '/foo/bar/baz',
  'http://www.test.com',
  'https://test.com/some/path?aaaa=bbbb&cccc=dddd&eeee=ffff',
  'https://user:pwd@192.168.0.1:8000/foo/bar?baz=bat&slack=fnord&asdf=the+quick%20brown+fox+%26+hound#foofrag',
);

sub test {
  my ($msg, $count, $tests) = @_;
  local $| = 1;

  print "--------------------------------------------------------------------------------\n";
  print "> $msg\n";
  print "--------------------------------------------------------------------------------\n";
  my $results = cmpthese $count, $tests;

  print $POD "=head2 $msg\n\n";

  foreach (@$results) {
    printf $POD "  %15s%15s%15s%15s\n", @$_;
  }

  print $POD "\n\n";

  print "\n";
}

test 'Constructor', 500_000, {
  'URI' => sub{ my $uri = URI->new($urls[1]) },
  'URI::Fast' => sub{ my $uri = uri $urls[1] },
};

test 'Parse scheme', 200_000, {
  'URI' => sub{ my $uri = URI->new($urls[3]); $uri->scheme },
  'URI::Fast' => sub{ my $uri = uri $urls[3]; $uri->scheme },
};

test 'Update scheme', 200_000, {
  'URI' => sub{ my $uri = URI->new($urls[1]); $uri->scheme('https') },
  'URI::Fast' => sub{ my $uri = uri $urls[1]; $uri->scheme('https') },
};

test 'Parse authorization', 200_000, {
  'URI' => sub{ my $uri = URI->new($urls[3]); $uri->host },
  'URI::Fast' => sub{ my $uri = uri $urls[3]; $uri->host },
};

test 'Update authorization', 200_000, {
  'URI' => sub{ my $uri = URI->new($urls[3]); $uri->host('test.com') },
  'URI::Fast' => sub{ my $uri = uri $urls[3]; $uri->host('test.com') },
};

test 'Parse path', 200_000, {
  'URI/$' => sub{ my $uri = URI->new($urls[3]); my $p = $uri->path },
  'URI/@' => sub{ my $uri = URI->new($urls[3]); my @p = $uri->path_segments },
  'URI::Fast/$' => sub{ my $uri = uri $urls[3]; my $p = $uri->path },
  'URI::Fast/@' => sub{ my $uri = uri $urls[3]; my @p = $uri->path },
};

test 'Update path', 200_000, {
  'URI' => sub{ my $uri = URI->new($urls[3]); $uri->path('/foo/bar') },
  'URI::Fast/$' => sub{ my $uri = uri $urls[3]; $uri->path('/foo/bar') },
  'URI::Fast/@' => sub{ my $uri = uri $urls[3]; $uri->path(['foo', 'bar']) },
};

test 'Parse query', 200_000, {
  'URI' => sub{ my $uri = URI->new($urls[3]); $uri->query_form },
  'URI::Fast' => sub{ my $uri = uri $urls[3]; $uri->param('asdf') },
};

test 'Set query parameter', 200_000, {
  'URI' => sub{ my $uri = URI->new($urls[3]); $uri->query_form(foo => 'bar') },
  'URI::Fast' => sub{ my $uri = uri $urls[3]; $uri->param('foo', 'bar') },
};

test 'Stringification', 200_000, {
  'URI' => sub{ my $uri = URI->new($urls[3]); my $str = "$uri" },
  'URI::Fast' => sub{ my $uri = uri $urls[3]; my $str = "$uri" },
};

close $POD;
